// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example-simple.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_example_2dsimple_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_example_2dsimple_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_example_2dsimple_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_example_2dsimple_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_example_2dsimple_2eproto;
namespace ProtoTest {
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
}  // namespace ProtoTest
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoTest::Data* Arena::CreateMaybeMessage<::ProtoTest::Data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoTest {

// ===================================================================

class Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoTest.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  ~Data() override;
  explicit constexpr Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoTest.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexXFieldNumber = 5,
    kVertexYFieldNumber = 6,
    kColorRFieldNumber = 1,
    kColorGFieldNumber = 2,
    kColorBFieldNumber = 3,
    kColorAFieldNumber = 4,
  };
  // repeated float vertex_x = 5;
  int vertex_x_size() const;
  private:
  int _internal_vertex_x_size() const;
  public:
  void clear_vertex_x();
  private:
  float _internal_vertex_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vertex_x() const;
  void _internal_add_vertex_x(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vertex_x();
  public:
  float vertex_x(int index) const;
  void set_vertex_x(int index, float value);
  void add_vertex_x(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vertex_x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vertex_x();

  // repeated float vertex_y = 6;
  int vertex_y_size() const;
  private:
  int _internal_vertex_y_size() const;
  public:
  void clear_vertex_y();
  private:
  float _internal_vertex_y(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vertex_y() const;
  void _internal_add_vertex_y(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vertex_y();
  public:
  float vertex_y(int index) const;
  void set_vertex_y(int index, float value);
  void add_vertex_y(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vertex_y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vertex_y();

  // uint32 color_r = 1;
  void clear_color_r();
  uint32_t color_r() const;
  void set_color_r(uint32_t value);
  private:
  uint32_t _internal_color_r() const;
  void _internal_set_color_r(uint32_t value);
  public:

  // uint32 color_g = 2;
  void clear_color_g();
  uint32_t color_g() const;
  void set_color_g(uint32_t value);
  private:
  uint32_t _internal_color_g() const;
  void _internal_set_color_g(uint32_t value);
  public:

  // uint32 color_b = 3;
  void clear_color_b();
  uint32_t color_b() const;
  void set_color_b(uint32_t value);
  private:
  uint32_t _internal_color_b() const;
  void _internal_set_color_b(uint32_t value);
  public:

  // uint32 color_a = 4;
  void clear_color_a();
  uint32_t color_a() const;
  void set_color_a(uint32_t value);
  private:
  uint32_t _internal_color_a() const;
  void _internal_set_color_a(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoTest.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vertex_x_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vertex_y_;
  uint32_t color_r_;
  uint32_t color_g_;
  uint32_t color_b_;
  uint32_t color_a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2dsimple_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data

// uint32 color_r = 1;
inline void Data::clear_color_r() {
  color_r_ = 0u;
}
inline uint32_t Data::_internal_color_r() const {
  return color_r_;
}
inline uint32_t Data::color_r() const {
  // @@protoc_insertion_point(field_get:ProtoTest.Data.color_r)
  return _internal_color_r();
}
inline void Data::_internal_set_color_r(uint32_t value) {
  
  color_r_ = value;
}
inline void Data::set_color_r(uint32_t value) {
  _internal_set_color_r(value);
  // @@protoc_insertion_point(field_set:ProtoTest.Data.color_r)
}

// uint32 color_g = 2;
inline void Data::clear_color_g() {
  color_g_ = 0u;
}
inline uint32_t Data::_internal_color_g() const {
  return color_g_;
}
inline uint32_t Data::color_g() const {
  // @@protoc_insertion_point(field_get:ProtoTest.Data.color_g)
  return _internal_color_g();
}
inline void Data::_internal_set_color_g(uint32_t value) {
  
  color_g_ = value;
}
inline void Data::set_color_g(uint32_t value) {
  _internal_set_color_g(value);
  // @@protoc_insertion_point(field_set:ProtoTest.Data.color_g)
}

// uint32 color_b = 3;
inline void Data::clear_color_b() {
  color_b_ = 0u;
}
inline uint32_t Data::_internal_color_b() const {
  return color_b_;
}
inline uint32_t Data::color_b() const {
  // @@protoc_insertion_point(field_get:ProtoTest.Data.color_b)
  return _internal_color_b();
}
inline void Data::_internal_set_color_b(uint32_t value) {
  
  color_b_ = value;
}
inline void Data::set_color_b(uint32_t value) {
  _internal_set_color_b(value);
  // @@protoc_insertion_point(field_set:ProtoTest.Data.color_b)
}

// uint32 color_a = 4;
inline void Data::clear_color_a() {
  color_a_ = 0u;
}
inline uint32_t Data::_internal_color_a() const {
  return color_a_;
}
inline uint32_t Data::color_a() const {
  // @@protoc_insertion_point(field_get:ProtoTest.Data.color_a)
  return _internal_color_a();
}
inline void Data::_internal_set_color_a(uint32_t value) {
  
  color_a_ = value;
}
inline void Data::set_color_a(uint32_t value) {
  _internal_set_color_a(value);
  // @@protoc_insertion_point(field_set:ProtoTest.Data.color_a)
}

// repeated float vertex_x = 5;
inline int Data::_internal_vertex_x_size() const {
  return vertex_x_.size();
}
inline int Data::vertex_x_size() const {
  return _internal_vertex_x_size();
}
inline void Data::clear_vertex_x() {
  vertex_x_.Clear();
}
inline float Data::_internal_vertex_x(int index) const {
  return vertex_x_.Get(index);
}
inline float Data::vertex_x(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTest.Data.vertex_x)
  return _internal_vertex_x(index);
}
inline void Data::set_vertex_x(int index, float value) {
  vertex_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoTest.Data.vertex_x)
}
inline void Data::_internal_add_vertex_x(float value) {
  vertex_x_.Add(value);
}
inline void Data::add_vertex_x(float value) {
  _internal_add_vertex_x(value);
  // @@protoc_insertion_point(field_add:ProtoTest.Data.vertex_x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Data::_internal_vertex_x() const {
  return vertex_x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Data::vertex_x() const {
  // @@protoc_insertion_point(field_list:ProtoTest.Data.vertex_x)
  return _internal_vertex_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Data::_internal_mutable_vertex_x() {
  return &vertex_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Data::mutable_vertex_x() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTest.Data.vertex_x)
  return _internal_mutable_vertex_x();
}

// repeated float vertex_y = 6;
inline int Data::_internal_vertex_y_size() const {
  return vertex_y_.size();
}
inline int Data::vertex_y_size() const {
  return _internal_vertex_y_size();
}
inline void Data::clear_vertex_y() {
  vertex_y_.Clear();
}
inline float Data::_internal_vertex_y(int index) const {
  return vertex_y_.Get(index);
}
inline float Data::vertex_y(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTest.Data.vertex_y)
  return _internal_vertex_y(index);
}
inline void Data::set_vertex_y(int index, float value) {
  vertex_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoTest.Data.vertex_y)
}
inline void Data::_internal_add_vertex_y(float value) {
  vertex_y_.Add(value);
}
inline void Data::add_vertex_y(float value) {
  _internal_add_vertex_y(value);
  // @@protoc_insertion_point(field_add:ProtoTest.Data.vertex_y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Data::_internal_vertex_y() const {
  return vertex_y_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Data::vertex_y() const {
  // @@protoc_insertion_point(field_list:ProtoTest.Data.vertex_y)
  return _internal_vertex_y();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Data::_internal_mutable_vertex_y() {
  return &vertex_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Data::mutable_vertex_y() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTest.Data.vertex_y)
  return _internal_mutable_vertex_y();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoTest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_example_2dsimple_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_example_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_example_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_example_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_example_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_example_2eproto;
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Shape* Arena::CreateMaybeMessage<::Shape>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Shape_ShapeType : int {
  Shape_ShapeType_CIRCLE = 0,
  Shape_ShapeType_SQUARE = 1,
  Shape_ShapeType_TRIANGLE = 2,
  Shape_ShapeType_Shape_ShapeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Shape_ShapeType_Shape_ShapeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Shape_ShapeType_IsValid(int value);
constexpr Shape_ShapeType Shape_ShapeType_ShapeType_MIN = Shape_ShapeType_CIRCLE;
constexpr Shape_ShapeType Shape_ShapeType_ShapeType_MAX = Shape_ShapeType_TRIANGLE;
constexpr int Shape_ShapeType_ShapeType_ARRAYSIZE = Shape_ShapeType_ShapeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shape_ShapeType_descriptor();
template<typename T>
inline const std::string& Shape_ShapeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Shape_ShapeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Shape_ShapeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Shape_ShapeType_descriptor(), enum_t_value);
}
inline bool Shape_ShapeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Shape_ShapeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Shape_ShapeType>(
    Shape_ShapeType_descriptor(), name, value);
}
// ===================================================================

class Shape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shape) */ {
 public:
  inline Shape() : Shape(nullptr) {};
  virtual ~Shape();

  Shape(const Shape& from);
  Shape(Shape&& from) noexcept
    : Shape() {
    *this = ::std::move(from);
  }

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shape& operator=(Shape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Shape& a, Shape& b) {
    a.Swap(&b);
  }
  inline void Swap(Shape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shape* New() const final {
    return CreateMaybeMessage<Shape>(nullptr);
  }

  Shape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shape";
  }
  protected:
  explicit Shape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Shape_ShapeType ShapeType;
  static constexpr ShapeType CIRCLE =
    Shape_ShapeType_CIRCLE;
  static constexpr ShapeType SQUARE =
    Shape_ShapeType_SQUARE;
  static constexpr ShapeType TRIANGLE =
    Shape_ShapeType_TRIANGLE;
  static inline bool ShapeType_IsValid(int value) {
    return Shape_ShapeType_IsValid(value);
  }
  static constexpr ShapeType ShapeType_MIN =
    Shape_ShapeType_ShapeType_MIN;
  static constexpr ShapeType ShapeType_MAX =
    Shape_ShapeType_ShapeType_MAX;
  static constexpr int ShapeType_ARRAYSIZE =
    Shape_ShapeType_ShapeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ShapeType_descriptor() {
    return Shape_ShapeType_descriptor();
  }
  template<typename T>
  static inline const std::string& ShapeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ShapeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ShapeType_Name.");
    return Shape_ShapeType_Name(enum_t_value);
  }
  static inline bool ShapeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ShapeType* value) {
    return Shape_ShapeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 6,
    kSizeFieldNumber = 1,
    kColorRFieldNumber = 2,
    kColorGFieldNumber = 3,
    kColorBFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float size = 1;
  void clear_size();
  float size() const;
  void set_size(float value);
  private:
  float _internal_size() const;
  void _internal_set_size(float value);
  public:

  // uint32 color_r = 2;
  void clear_color_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 color_r() const;
  void set_color_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color_r() const;
  void _internal_set_color_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 color_g = 3;
  void clear_color_g();
  ::PROTOBUF_NAMESPACE_ID::uint32 color_g() const;
  void set_color_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color_g() const;
  void _internal_set_color_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 color_b = 4;
  void clear_color_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 color_b() const;
  void set_color_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color_b() const;
  void _internal_set_color_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Shape.ShapeType type = 5;
  void clear_type();
  ::Shape_ShapeType type() const;
  void set_type(::Shape_ShapeType value);
  private:
  ::Shape_ShapeType _internal_type() const;
  void _internal_set_type(::Shape_ShapeType value);
  public:

  // @@protoc_insertion_point(class_scope:Shape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_r_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_b_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shape

// float size = 1;
inline void Shape::clear_size() {
  size_ = 0;
}
inline float Shape::_internal_size() const {
  return size_;
}
inline float Shape::size() const {
  // @@protoc_insertion_point(field_get:Shape.size)
  return _internal_size();
}
inline void Shape::_internal_set_size(float value) {
  
  size_ = value;
}
inline void Shape::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Shape.size)
}

// uint32 color_r = 2;
inline void Shape::clear_color_r() {
  color_r_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Shape::_internal_color_r() const {
  return color_r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Shape::color_r() const {
  // @@protoc_insertion_point(field_get:Shape.color_r)
  return _internal_color_r();
}
inline void Shape::_internal_set_color_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_r_ = value;
}
inline void Shape::set_color_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color_r(value);
  // @@protoc_insertion_point(field_set:Shape.color_r)
}

// uint32 color_g = 3;
inline void Shape::clear_color_g() {
  color_g_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Shape::_internal_color_g() const {
  return color_g_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Shape::color_g() const {
  // @@protoc_insertion_point(field_get:Shape.color_g)
  return _internal_color_g();
}
inline void Shape::_internal_set_color_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_g_ = value;
}
inline void Shape::set_color_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color_g(value);
  // @@protoc_insertion_point(field_set:Shape.color_g)
}

// uint32 color_b = 4;
inline void Shape::clear_color_b() {
  color_b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Shape::_internal_color_b() const {
  return color_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Shape::color_b() const {
  // @@protoc_insertion_point(field_get:Shape.color_b)
  return _internal_color_b();
}
inline void Shape::_internal_set_color_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_b_ = value;
}
inline void Shape::set_color_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color_b(value);
  // @@protoc_insertion_point(field_set:Shape.color_b)
}

// .Shape.ShapeType type = 5;
inline void Shape::clear_type() {
  type_ = 0;
}
inline ::Shape_ShapeType Shape::_internal_type() const {
  return static_cast< ::Shape_ShapeType >(type_);
}
inline ::Shape_ShapeType Shape::type() const {
  // @@protoc_insertion_point(field_get:Shape.type)
  return _internal_type();
}
inline void Shape::_internal_set_type(::Shape_ShapeType value) {
  
  type_ = value;
}
inline void Shape::set_type(::Shape_ShapeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Shape.type)
}

// string name = 6;
inline void Shape::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Shape::name() const {
  // @@protoc_insertion_point(field_get:Shape.name)
  return _internal_name();
}
inline void Shape::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Shape.name)
}
inline std::string* Shape::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Shape.name)
  return _internal_mutable_name();
}
inline const std::string& Shape::_internal_name() const {
  return name_.Get();
}
inline void Shape::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Shape::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Shape.name)
}
inline void Shape::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Shape.name)
}
inline void Shape::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Shape.name)
}
inline std::string* Shape::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Shape::release_name() {
  // @@protoc_insertion_point(field_release:Shape.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Shape::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Shape.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Shape_ShapeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Shape_ShapeType>() {
  return ::Shape_ShapeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_example_2eproto
